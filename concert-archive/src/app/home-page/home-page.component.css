/* Simplified docked mini-player: video-only, minimal chrome
   - Remove title/controls whitespace
   - Make preview twice as large (320x180) and let iframe fill
   - Remove background, border-radius and heavy shadow so the video is the focus */
.player-dock {
  position: fixed;
  right: 16px;
  bottom: 16px;
  /* base size (current min size). JS will set inline width/height based on scale */
  width: 320px; /* base width at scale=1 */
  height: 180px; /* base height at scale=1 */
  background: transparent; /* show only video */
  border-radius: 0;
  box-shadow: none;
  z-index: 4000;
  overflow: hidden;
  display: block;
  transition: transform 180ms ease, opacity 180ms ease;
}

/* remove hover lift */
.player-dock:hover { transform: none; }

/* dock layout: single video region */
.dock-content { display: block; width: 100%; height: 100%; }

/* hide left area (title/controls) to remove whitespace and focus on video */
.dock-left, .dock-controls, .dock-title { display: none !important; }

/* video region should occupy whole dock */
.dock-video {
  width: 100%;
  height: 100%;
  display: block;
  background: #000;
}

/* ensure the iframe wrapper and iframe fill the region */
.dock-video app-iframe-wrapper,
.dock-video iframe {
  width: 100% !important;
  height: 100% !important;
  display: block;
  border: 0;
}

/* Resize handle (upper-left) */
.resize-handle {
  position: absolute;
  width: 20px;
  height: 20px;
  background: rgba(0,0,0,0.25);
  z-index: 4010;
  border-radius: 3px;
  display: block;
  touch-action: none; /* allow pointer events for dragging */
}
.resize-handle.top-left {
  left: 6px;
  top: 6px;
  cursor: nwse-resize; /* visually indicates diagonal resize */
}

/* When resizing, make the handle slightly larger/visible */
.player-dock.resizing .resize-handle { background: rgba(0,0,0,0.4); transform: scale(1.05); }

/* Ensure pointer events on the iframe don't swallow pointermove during resize
   We will use setPointerCapture on the handle to keep events routed. */
.dock-video app-iframe-wrapper, .dock-video iframe { pointer-events: auto; }

/* fallback preview styling when embed not available */
.dock-video > div[style] {
  width: 100% !important;
  height: 100% !important;
  background: #000 !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  color: #fff !important;
}

/* HERO */
.home-hero {
  background: transparent; /* image sits behind via absolute positioning */
  color: white;
  position: relative; /* for absolutely positioned cover */
  /* Reserve vertical space equal to the image height so the absolutely positioned
     .hero-cover-full doesn't overlap the following content. Use the same clamp
     as the image so they remain in sync. */
  padding: 0 0 calc(clamp(30px, 20vh, 60px) + 12px);
}
.hero-inner {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 20px;
  max-width: 1100px;
  margin: 0 auto;
  text-align: center;
  position: relative; /* sit above the cover image */
  z-index: 3; /* ensure hero text sits above the image overlay */
  padding-top: 48px; /* reduced so hero doesn't push the concerts far down */
}
.hero-meta {
  flex: 1 1 auto;
}
.hero-sub {
  text-transform: uppercase;
  letter-spacing: 1.6px;
  font-size: 12px;
  opacity: 0.85;
  margin-bottom: 6px;
}
.hero-title {
  font-size: 44px;
  margin: 0 0 6px;
  line-height: 1.02;
  font-weight: 700;
}
.hero-date { font-size: 14px; color: rgba(0,0,0,0.6); margin-bottom: 12px; }
.hero-actions { display:flex; gap:12px; justify-content:center; }
.hero-cover { display:none; }
.cover-placeholder { display:none; }

/* full-width cover image that sits below the hero header */
.hero-cover-full {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  width: 100vw;
  /* Use a responsive, clamped height so the image doesn't grow too large on small screens
     clamp(min, preferred, max) keeps height between 120px and 240px while allowing
     the preferred value (20vh) on larger devices. */
  height: clamp(120px, 20vh, 240px);
  overflow: hidden;
  z-index: 0;
}
.hero-cover-full img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
  /* Prevent the image from exceeding its intrinsic size which can cause it to scale up
     on very small devices; this ensures it stays crisp and bounded. */
  max-width: 100%;
  max-height: 100%;
}

/* subtle dark overlay for readability of hero text */
.hero-cover-full::after {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(rgba(0,0,0,0.35), rgba(0,0,0,0.15));
  pointer-events: none;
}

.hero-subtitle {
  font-size: 18px;
  color: rgba(252, 250, 250, 0.85);
  line-height: 1.4;
}

@media (max-width: 600px) {
  /* Keep the clamped height on small screens; reduce hero inner padding slightly */
  .hero-inner { padding-top: 40px; }
}

/* CONCERT LIST */
.concert-list {
  /* newspaper-style multi-column list: items flow vertically then across columns */
  margin: 18px 18px;
  padding: 0;
  width: 100%;
  max-width: calc(100% - 420px); /* leave room for right-side player on wide viewports */
}
.concert-card { background: transparent; border: none; border-radius: 0; box-shadow: none; margin-bottom: 0; overflow: visible; padding: 0; }
.concert-card + .concert-card { border-top: none; }
.concert-table {
  /* Use CSS multi-column layout so concerts stack vertically then flow into columns
     column-width determines the preferred column size; the browser will fit as many
     columns as available. This produces the 'newspaper' vertical stacking. */
  display: block;
  column-width: 340px;
  column-gap: 24px;
  padding: 24px 8px;
  overflow-x: visible; /* ensure no forced horizontal scrolling */
}
.concert-column {
  /* Each concert becomes an inline-block so it participates in the multi-column flow */
  display: inline-block;
  width: 100%;
  background: transparent;
  margin: 0 0 6px; /* small gap between stacked items */
  padding: 12px 8px; /* internal spacing inside each concert block */
  box-sizing: border-box;
  break-inside: avoid;
  -webkit-column-break-inside: avoid;
  -moz-column-break-inside: avoid;
  border-top: 1px solid rgba(0,0,0,0.06); /* thin divider, not a large white gap */
}
.concert-column:first-child { border-top: none; }
.concert-column .concert-header { padding: 10px 8px; }
.concert-header { display:flex; flex-direction:column; align-items:flex-start; justify-content:flex-start; padding:12px 8px; border-bottom: none; text-align:left; gap:6px; }
.concert-title { font-weight:800; font-size:22px; line-height:1.02; width:100%; }
.concert-desc { color: rgba(0,0,0,0.65); font-size: 13px; margin-top: 6px; max-width: 100%; }
.concert-date { color: rgba(0,0,0,0.6); font-size:16px; margin-top:4px; }
.concert-chapters { padding: 4px 0; }
.track-row { display:flex; align-items:center; gap:8px; padding: 4px 6px; }
.track-index { color: #ff5a5f; width: 28px; text-align:center; }
.track-actions { margin-left: auto; }

/* keep the index and title on a single line */
.track-content {
  display: flex;
  align-items: center;
  gap: 12px;
  width: 100%;
}

.track-index {
  flex: 0 0 2px;
}

/* ensure song info stacks nicely */
.song-info { display:flex; flex-direction:column; gap:4px; align-items:flex-start; min-width:0; overflow: hidden; }
.song-main { display:flex; flex-direction:row; gap:12px; align-items:center; width:100%; }
.song-link { padding:0; font-size:medium; font-weight:600; text-transform:none; display: inline-block; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.song-duration { color: rgba(0,0,0,0.5); font-size:12px; }
.song-desc { color: rgba(0,0,0,0.65); font-size: 12px; margin-top: 2px; }

@media (max-width: 960px) {
  .hero-inner { flex-direction:column; align-items:center; }
  .concert-list { max-width: 100%; margin: 18px 12px; }
  .concert-header { padding: 16px 12px; }
  .concert-title { font-size: 40px; }
  .concert-date { font-size: 14px; }
}

/* Responsive tweaks for narrow viewports */
@media (max-width: 980px) {
  .concert-table { gap: 16px; }
}

/* On very small screens, make each concert column full-width so rows stack vertically */
@media (max-width: 700px) {
  .concert-column {
    flex: 1 1 100%;
    min-width: 0;
    max-width: 100%;
  }
  .hero-title { font-size: 32px; }
}

/* Remove full-popup/sidebar styles â€” this component uses the dock-only player. */

.chapter-block { margin-bottom: 6px; }
/* Chapter / song list styles for non-collapsible layout (compact) */
.concert-chapters { padding: 4px 6px 4px; }
.chapter-title { font-weight:600; margin-bottom:6px; color: #222; }
.track-row { padding: 4px 0; }

/* Right-side sticky sidebar player styles */

.dock-controls button[mat-icon-button], .dock-left button[mat-icon-button] {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: rgba(0,0,0,0.04);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 2px 6px rgba(0,0,0,0.06);
  transition: transform 120ms ease, box-shadow 120ms ease;
}
.dock-controls button[mat-icon-button]:hover, .dock-left button[mat-icon-button]:hover { transform: translateY(-2px); box-shadow: 0 6px 18px rgba(0,0,0,0.12); }
.dock-controls button[mat-icon-button] img, .dock-left button[mat-icon-button] img { width: 18px; height: 18px; object-fit: contain; display:block; }

/* smaller sidebar compatibility rules */
/* player-sidebar rules removed; dock (`.player-dock` / `.dock-video`) is used instead */

/* smoother transitions */
/* leftover movable-player rules removed */

/* cleaned up: dock-only styles remain above */
